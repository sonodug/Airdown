shop
enemies:
basic plane
basic dodge plane
basic improved plane (dodge + new rocket)

laser
self-guided

(state machine)
1.targetoffsetpoint
2.with delay

vars of state machine:
1-
public class TargetMovement : MonoBehaviour, IMovable
{
    [SerializeField] private float _speed;
    [SerializeField] private float _delayDuration;

    [Range(5, 10)]
    [SerializeField] private float _targetOffsetY;

    private Player _target;
    private float _delayTimer;
    private bool _isDelaying;

    private enum State
    {
        FollowingTarget,
        Delay
    }

    private State _currentState;

    private void Start()
    {
        _targetOffsetY = Random.Range(3, _targetOffsetY);
        _currentState = State.FollowingTarget;
    }

    private void Update()
    {
        switch (_currentState)
        {
            case State.FollowingTarget:
                MoveTowardsTarget();
                break;
            case State.Delay:
                HandleDelayState();
                break;
        }
    }

    private void MoveTowardsTarget()
    {
        if (_target)
        {
            Vector3 targetPosition = _target.transform.position;
            transform.position = Vector3.MoveTowards(transform.position, new Vector3(targetPosition.x, targetPosition.y + _targetOffsetY, 0), _speed * Time.deltaTime);
        }
    }

    private void HandleDelayState()
    {
        _delayTimer -= Time.deltaTime;
        if (_delayTimer <= 0)
        {
            _isDelaying = false;
            _currentState = State.FollowingTarget;
        }
    }

    public void Move()
    {
        // Do nothing, as this method is not used in the state machine
    }

    public void Move(Player target)
    {
        _target = target;
        if (!_isDelaying)
        {
            _currentState = State.FollowingTarget;
        }
    }

    public void StartDelay()
    {
        _isDelaying = true;
        _delayTimer = _delayDuration;
        _currentState = State.Delay;
    }
}
2-